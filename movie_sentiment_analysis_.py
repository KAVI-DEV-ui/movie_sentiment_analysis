# -*- coding: utf-8 -*-
"""movie sentiment analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f6xvOfzSfrzxNFOgyyDCCfRnNNmhCaMJ
"""

import pandas as pd
import numpy as np
import re
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("IMDB Dataset.csv")
df.head()

import nltk
nltk.download('stopwords')

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

stop_words = set(stopwords.words('english'))

def clean_text(text):
    # Lowercase
    text = text.lower()
    # Remove HTML tags
    text = re.sub(r'<.*?>', '', text)
    # Remove non-alphabetic characters
    text = re.sub(r'[^a-z]', ' ', text)
    # Remove stopwords
    words = [word for word in text.split() if word not in stop_words]
    return " ".join(words)

df['cleaned_review'] = df['review'].apply(clean_text)
df.head()

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer(max_features=5000)  # limit to 5000 words
X = vectorizer.fit_transform(df['cleaned_review']).toarray()

y = df['sentiment'].map({'positive': 1, 'negative': 0})  # encode labels

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

from sklearn.linear_model import LogisticRegression

# Create and train the model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

def predict_sentiment(review):
    # Clean the input text (same as training preprocessing)
    cleaned = clean_text(review)
    # Convert to vector
    vectorized = vectorizer.transform([cleaned]).toarray()
    # Predict
    prediction = model.predict(vectorized)[0]
    return "Positive ðŸ˜€" if prediction == 1 else "Negative ðŸ˜¡"

print(predict_sentiment("The movie was fantastic! I really loved the story."))
print(predict_sentiment("It was the worst film I have ever seen, boring and long."))
print(predict_sentiment("Not bad, but could have been better."))

